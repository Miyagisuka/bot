import os
import json
import random
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
NUM_TASKS = 12
VARIANTS_PER_TASK = 15
TASKS_DIR = 'tasks'
URLS_DIR = 'URLs'
DATA_FILE = 'bot_data.json'

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
GREETING_INPUTS = [
    "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
    "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "—Å–∞–ª—é—Ç", "–∑–¥–æ—Ä–æ–≤–æ", "–ø—Ä–∏–≤–µ—Ç–∏–∫",
    "—Ö–µ–ª–ª–æ", "–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫", "–π–æ—É", "–∫—É", "—Ö—ç–ª–ª–æ—É"
]

GREETING_OUTPUTS = [
    "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ì–æ—Ç–æ–≤ –∫ –∏–∑—É—á–µ–Ω–∏—é –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏?",
    "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª:",
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ó–∞–¥–∞—á–∫–∏ –∂–¥—É—Ç —Ç–µ–±—è!",
    "–•–∞–π! –ù–∞—á–Ω—ë–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –ï–ì–≠?",
    "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç?",
    "–°–∞–ª—é—Ç! –ó–∞–≥–ª—è–Ω–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!",
    "–ó–¥–æ—Ä–æ–≤–æ! –ü–æ—Å–º–æ—Ç—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª—ã—Ö —Ç–µ—Å—Ç–æ–≤?",
    "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
    "–ô–æ—É! –ì–æ—Ç–æ–≤ –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–≤–∏–≥–∞–º?",
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ó–∞–¥–∞–Ω–∏—è —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è!",
    "–•—ç–ª–ª–æ—É! –ù–∞—á–Ω—ë–º —Å —Ç–µ–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏?"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if os.path.isfile(DATA_FILE):
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
else:
    data = {'sessions': {}}

async def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∏ —Å—Å—ã–ª–æ–∫
TASKS = []
for t in range(1, NUM_TASKS + 1):
    variants = []
    folder = os.path.join(TASKS_DIR, str(t))
    for v in range(1, VARIANTS_PER_TASK + 1):
        txt = os.path.join(folder, f"{v}.txt")
        png = os.path.join(folder, f"{v}.png")
        text, ans = None, None
        if os.path.isfile(txt):
            lines = open(txt, encoding='utf-8').read().splitlines()
            text = lines[0] if len(lines) >= 1 else None
            ans = lines[1] if len(lines) >= 2 else None
        photo = png if os.path.isfile(png) else None
        variants.append({'text': text, 'answer': ans, 'photo': photo})
    TASKS.append(variants)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return ReplyKeyboardMarkup([
        ["–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
        ["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"]
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ."
        "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu()
    )

# –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
async def ref_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ (1-12) –∏–ª–∏ '–û—Ç–º–µ–Ω–∞':",
        reply_markup=ReplyKeyboardMarkup([[str(i) for i in range(1, NUM_TASKS+1)], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    context.user_data['awaiting_ref'] = True

async def handle_ref_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == '–æ—Ç–º–µ–Ω–∞':
        context.user_data.pop('awaiting_ref', None)
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞.", reply_markup=main_menu())
        return
    if text.isdigit() and 1 <= int(text) <= NUM_TASKS:
        path = os.path.join(URLS_DIR, f"{text}.txt")
        if os.path.isfile(path):
            with open(path, encoding='utf-8') as f:
                await update.message.reply_text(f.read())
        else:
            await update.message.reply_text("–°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        return
    context.user_data.pop('awaiting_ref', None)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç –Ω–∞—á–∞—Ç. –í–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    uid = str(update.effective_user.id)
    session = {'start': datetime.utcnow().isoformat(), 'answers': []}
    data['sessions'].setdefault(uid, []).append(session)
    context.user_data.update({'session': session, 'task_idx': 0, 'in_test': True})
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data['task_idx']
    var = random.randint(1, VARIANTS_PER_TASK)
    q = TASKS[idx][var-1]
    context.user_data['current'] = {'task': idx+1, 'variant': var, 'correct': q['answer']}
    text = q['text'] or '–£—Å–ª–æ–≤–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
    await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ {idx+1}, –≤–∞—Ä–∏–∞–Ω—Ç {var}:\n{text}")
    if q['photo']:
        await update.message.reply_photo(open(q['photo'], 'rb'))

async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == '–æ—Ç–º–µ–Ω–∞' and context.user_data.get('in_test'):
        context.user_data.clear()
        await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu())
        return
    session = context.user_data.get('session')
    current = context.user_data.get('current')
    if not session or not current:
        return
    ans = text
    session['answers'].append({
        'task': current['task'], 'variant': current['variant'],
        'answer': ans, 'correct': current['correct']
    })
    context.user_data['task_idx'] = current['task']
    context.user_data.pop('current', None)
    if context.user_data['task_idx'] < NUM_TASKS:
        await send_question(update, context)
    else:
        context.user_data.pop('in_test', None)
        session['end'] = datetime.utcnow().isoformat()
        correct_count = sum(1 for a in session['answers'] if a['answer'] == a['correct'])
        session['score'] = f"{correct_count}/{NUM_TASKS}"
        await save_data()
        lines = [
            f"–ó{a['task']} –≤{a['variant']}: –≤–∞—à {a['answer']} - —Ñ–∞–∫—Ç {a['correct']} - {'OK' if a['answer']==a['correct'] else 'NO'}"
            for a in session['answers']
        ]
        await update.message.reply_text("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(lines))
        await update.message.reply_text(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {session['score']}", reply_markup=main_menu())

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def show_sessions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    sessions = data['sessions'].get(uid, [])
    if not sessions:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫.", reply_markup=main_menu())
        return
    buttons = [[str(i+1) for i in range(len(sessions))], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ '–û—Ç–º–µ–Ω–∞':",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    context.user_data['awaiting_session'] = True

async def handle_session_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == '–æ—Ç–º–µ–Ω–∞':
        context.user_data.pop('awaiting_session', None)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    if text.isdigit():
        idx = int(text)-1
        uid = str(update.effective_user.id)
        sessions = data['sessions'].get(uid, [])
        if 0 <= idx < len(sessions):
            sess = sessions[idx]
            lines = [
                f"–ó{a['task']} –≤{a['variant']}: –≤–∞—à {a['answer']} - —Ñ–∞–∫—Ç {a['correct']} - {'OK' if a['answer']==a['correct'] else 'NO'}"
                for a in sess['answers']
            ]
            await update.message.reply_text(f"–î–µ—Ç–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ #{text}:\n" + "\n".join(lines))
        else:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")
        return
    context.user_data.pop('awaiting_session', None)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text in GREETING_INPUTS:
        response = random.choice(GREETING_OUTPUTS)
        await update.message.reply_text(response, reply_markup=main_menu())
        return

    if context.user_data.get('awaiting_ref'):
        await handle_ref_choice(update, context)
    elif context.user_data.get('awaiting_session'):
        await handle_session_choice(update, context)
    elif context.user_data.get('in_test'):
        await handle_test_answer(update, context)
    elif text == '–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã':
        await ref_materials(update, context)
    elif text == '–¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã':
        await start_test(update, context)
    elif text == '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã':
        await show_sessions(update, context)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token('7708870604:AAHpJ8uZXw_-OzZS3wJTpyK-h4dEM_4IOOA').build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
